package naturaldate

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleExpr
	ruleDate
	ruleYear
	ruleRelativeMinutes
	ruleRelativeHours
	ruleRelativeDays
	ruleRelativeWeeks
	ruleRelativeMonthDay
	ruleRelativeMonth
	ruleRelativeYear
	ruleRelativeWeekdays
	ruleDayOfMonth
	ruleTime
	ruleClock12Hour
	ruleClock24Hour
	ruleMinutes
	ruleSeconds
	ruleNumber
	ruleWeekday
	ruleMonth
	ruleIn
	ruleLast
	ruleNext
	ruleOrdinal
	ruleYEARS
	ruleYEAR
	ruleMONTHS
	ruleMONTH
	ruleWEEKS
	ruleWEEK
	ruleDAYS
	ruleHOURS
	ruleHOUR
	ruleMINUTES
	ruleMINUTE
	ruleYESTERDAY
	ruleTOMORROW
	ruleTODAY
	ruleAGO
	ruleFROM_NOW
	ruleNOW
	ruleAM
	rulePM
	ruleNEXT
	ruleIN
	ruleLAST
	ruleAT
	ruleON
	ruleCOMMA
	rule_
	ruleWhitespace
	ruleEOL
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	rulePegText
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
	ruleAction73
	ruleAction74
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"Expr",
	"Date",
	"Year",
	"RelativeMinutes",
	"RelativeHours",
	"RelativeDays",
	"RelativeWeeks",
	"RelativeMonthDay",
	"RelativeMonth",
	"RelativeYear",
	"RelativeWeekdays",
	"DayOfMonth",
	"Time",
	"Clock12Hour",
	"Clock24Hour",
	"Minutes",
	"Seconds",
	"Number",
	"Weekday",
	"Month",
	"In",
	"Last",
	"Next",
	"Ordinal",
	"YEARS",
	"YEAR",
	"MONTHS",
	"MONTH",
	"WEEKS",
	"WEEK",
	"DAYS",
	"HOURS",
	"HOUR",
	"MINUTES",
	"MINUTE",
	"YESTERDAY",
	"TOMORROW",
	"TODAY",
	"AGO",
	"FROM_NOW",
	"NOW",
	"AM",
	"PM",
	"NEXT",
	"IN",
	"LAST",
	"AT",
	"ON",
	"COMMA",
	"_",
	"Whitespace",
	"EOL",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"PegText",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
	"Action73",
	"Action74",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	t          time.Time
	number     int
	year       int
	month      time.Month
	dayOfMonth int
	weekday    time.Weekday
	hasTime    bool

	Buffer string
	buffer []rune
	rules  [130]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			dom := p.dayOfMonth
			if dom == 0 {
				dom = 1
			}
			p.t = time.Date(p.year, p.month, dom, 0, 0, 0, 0, p.t.Location())

		case ruleAction1:

			p.year = p.number

		case ruleAction2:

			p.t = p.t.Add(-time.Minute * time.Duration(p.number))

		case ruleAction3:

			p.t = p.t.Add(time.Minute * time.Duration(p.number))

		case ruleAction4:

			p.t = p.t.Add(-time.Minute * time.Duration(p.number))

		case ruleAction5:

			p.t = p.t.Add(time.Minute * time.Duration(p.number))

		case ruleAction6:

			p.t = p.t.Add(time.Minute)

		case ruleAction7:

			p.t = p.t.Add(-time.Minute)

		case ruleAction8:

			p.t = p.t.Add(-time.Hour * time.Duration(p.number))

		case ruleAction9:

			p.t = p.t.Add(time.Hour * time.Duration(p.number))

		case ruleAction10:

			p.t = p.t.Add(-time.Hour)

		case ruleAction11:

			p.t = p.t.Add(time.Hour)

		case ruleAction12:

			p.t = p.t.Add(-day * time.Duration(p.number))
			truncateDayIfNoTime(p)

		case ruleAction13:

			p.t = p.t.Add(day * time.Duration(p.number))
			truncateDayIfNoTime(p)

		case ruleAction14:

			p.t = p.t.Add(-week * time.Duration(p.number))
			truncateDayIfNoTime(p)

		case ruleAction15:

			p.t = p.t.Add(week * time.Duration(p.number))
			truncateDayIfNoTime(p)

		case ruleAction16:

			p.t = p.t.Add(week)
			truncateDayIfNoTime(p)

		case ruleAction17:

			p.t = p.t.Add(-week)
			truncateDayIfNoTime(p)

		case ruleAction18:

			p.t = nextMonthDayTime(p.t, p.month, p.dayOfMonth, 0, 0, 0)

		case ruleAction19:

			p.t = prevMonthDayTime(p.t, p.month, p.dayOfMonth, 0, 0, 0)

		case ruleAction20:

			p.t = p.t.AddDate(0, -p.number, 0)
			truncateDayIfNoTime(p)

		case ruleAction21:

			p.t = p.t.AddDate(0, p.number, 0)
			truncateDayIfNoTime(p)

		case ruleAction22:

			p.t = prevMonth(p.t, p.month)
			truncateDayIfNoTime(p)

		case ruleAction23:

			p.t = nextMonth(p.t, p.month)
			truncateDayIfNoTime(p)

		case ruleAction24:

			p.t = p.t.AddDate(0, -1, 0)
			truncateDayIfNoTime(p)

		case ruleAction25:

			p.t = p.t.AddDate(0, 1, 0)
			truncateDayIfNoTime(p)

		case ruleAction26:

			p.t = truncateYear(p.t.AddDate(-p.number, 0, 0))

		case ruleAction27:

			p.t = truncateYear(p.t.AddDate(p.number, 0, 0))

		case ruleAction28:

			p.t = truncateYear(p.t.AddDate(-1, 0, 0))

		case ruleAction29:

			p.t = truncateYear(p.t.AddDate(1, 0, 0))

		case ruleAction30:

			truncateDayIfNoTime(p)

		case ruleAction31:

			p.t = p.t.Add(-day)
			truncateDayIfNoTime(p)

		case ruleAction32:

			p.t = p.t.Add(+day)
			truncateDayIfNoTime(p)

		case ruleAction33:

			p.t = prevWeekday(p.t, p.weekday)
			truncateDayIfNoTime(p)

		case ruleAction34:

			p.t = nextWeekday(p.t, p.weekday)
			truncateDayIfNoTime(p)

		case ruleAction35:
			p.dayOfMonth = p.number
		case ruleAction36:

			year, month, day := p.t.Date()
			p.t = time.Date(year, month, day, p.number, 0, 0, 0, p.t.Location())
			p.hasTime = true

		case ruleAction37:

			year, month, day := p.t.Date()
			p.t = time.Date(year, month, day, p.number+12, 0, 0, 0, p.t.Location())
			p.hasTime = true

		case ruleAction38:

			year, month, day := p.t.Date()
			p.t = time.Date(year, month, day, p.number, 0, 0, 0, p.t.Location())
			p.hasTime = true

		case ruleAction39:

			t := p.t
			year, month, day := t.Date()
			hour, _, _ := t.Clock()
			p.t = time.Date(year, month, day, hour, p.number, 0, 0, t.Location())

		case ruleAction40:

			t := p.t
			year, month, day := t.Date()
			hour, min, _ := t.Clock()
			p.t = time.Date(year, month, day, hour, min, p.number, 0, t.Location())

		case ruleAction41:
			n, _ := strconv.Atoi(text)
			p.number = n
		case ruleAction42:
			p.number = 1
		case ruleAction43:
			p.number = 1
		case ruleAction44:
			p.number = 2
		case ruleAction45:
			p.number = 3
		case ruleAction46:
			p.number = 4
		case ruleAction47:
			p.number = 5
		case ruleAction48:
			p.number = 6
		case ruleAction49:
			p.number = 7
		case ruleAction50:
			p.number = 8
		case ruleAction51:
			p.number = 9
		case ruleAction52:
			p.number = 10
		case ruleAction53:
			p.weekday = time.Sunday
		case ruleAction54:
			p.weekday = time.Monday
		case ruleAction55:
			p.weekday = time.Tuesday
		case ruleAction56:
			p.weekday = time.Wednesday
		case ruleAction57:
			p.weekday = time.Thursday
		case ruleAction58:
			p.weekday = time.Friday
		case ruleAction59:
			p.weekday = time.Saturday
		case ruleAction60:
			p.month = time.January
		case ruleAction61:
			p.month = time.February
		case ruleAction62:
			p.month = time.March
		case ruleAction63:
			p.month = time.April
		case ruleAction64:
			p.month = time.May
		case ruleAction65:
			p.month = time.June
		case ruleAction66:
			p.month = time.July
		case ruleAction67:
			p.month = time.August
		case ruleAction68:
			p.month = time.September
		case ruleAction69:
			p.month = time.October
		case ruleAction70:
			p.month = time.November
		case ruleAction71:
			p.month = time.December
		case ruleAction72:
			p.number = 1
		case ruleAction73:
			p.number = 1
		case ruleAction74:
			p.number = 1

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(_ Expr)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rule_]() {
					goto l0
				}
				if !_rules[ruleExpr]() {
					goto l0
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expr <- <(NOW / RelativeMinutes / RelativeMinutes / RelativeHours / (RelativeDays (AT? Time)?) / (Time? RelativeDays) / (RelativeWeeks (AT? Time)?) / (Time? RelativeWeeks) / (RelativeWeekdays (AT? Time)?) / (Time? RelativeWeekdays) / (RelativeMonthDay (AT? Time)?) / RelativeMonth / RelativeYear / (Date (AT? Time)?) / (Time ON? Date))> */
		func() bool {
			position2, tokenIndex2 := position, tokenIndex
			{
				position3 := position
				{
					position4, tokenIndex4 := position, tokenIndex
					if !_rules[ruleNOW]() {
						goto l5
					}
					goto l4
				l5:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleRelativeMinutes]() {
						goto l6
					}
					goto l4
				l6:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleRelativeMinutes]() {
						goto l7
					}
					goto l4
				l7:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleRelativeHours]() {
						goto l8
					}
					goto l4
				l8:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleRelativeDays]() {
						goto l9
					}
					{
						position10, tokenIndex10 := position, tokenIndex
						{
							position12, tokenIndex12 := position, tokenIndex
							if !_rules[ruleAT]() {
								goto l12
							}
							goto l13
						l12:
							position, tokenIndex = position12, tokenIndex12
						}
					l13:
						if !_rules[ruleTime]() {
							goto l10
						}
						goto l11
					l10:
						position, tokenIndex = position10, tokenIndex10
					}
				l11:
					goto l4
				l9:
					position, tokenIndex = position4, tokenIndex4
					{
						position15, tokenIndex15 := position, tokenIndex
						if !_rules[ruleTime]() {
							goto l15
						}
						goto l16
					l15:
						position, tokenIndex = position15, tokenIndex15
					}
				l16:
					if !_rules[ruleRelativeDays]() {
						goto l14
					}
					goto l4
				l14:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleRelativeWeeks]() {
						goto l17
					}
					{
						position18, tokenIndex18 := position, tokenIndex
						{
							position20, tokenIndex20 := position, tokenIndex
							if !_rules[ruleAT]() {
								goto l20
							}
							goto l21
						l20:
							position, tokenIndex = position20, tokenIndex20
						}
					l21:
						if !_rules[ruleTime]() {
							goto l18
						}
						goto l19
					l18:
						position, tokenIndex = position18, tokenIndex18
					}
				l19:
					goto l4
				l17:
					position, tokenIndex = position4, tokenIndex4
					{
						position23, tokenIndex23 := position, tokenIndex
						if !_rules[ruleTime]() {
							goto l23
						}
						goto l24
					l23:
						position, tokenIndex = position23, tokenIndex23
					}
				l24:
					if !_rules[ruleRelativeWeeks]() {
						goto l22
					}
					goto l4
				l22:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleRelativeWeekdays]() {
						goto l25
					}
					{
						position26, tokenIndex26 := position, tokenIndex
						{
							position28, tokenIndex28 := position, tokenIndex
							if !_rules[ruleAT]() {
								goto l28
							}
							goto l29
						l28:
							position, tokenIndex = position28, tokenIndex28
						}
					l29:
						if !_rules[ruleTime]() {
							goto l26
						}
						goto l27
					l26:
						position, tokenIndex = position26, tokenIndex26
					}
				l27:
					goto l4
				l25:
					position, tokenIndex = position4, tokenIndex4
					{
						position31, tokenIndex31 := position, tokenIndex
						if !_rules[ruleTime]() {
							goto l31
						}
						goto l32
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
				l32:
					if !_rules[ruleRelativeWeekdays]() {
						goto l30
					}
					goto l4
				l30:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleRelativeMonthDay]() {
						goto l33
					}
					{
						position34, tokenIndex34 := position, tokenIndex
						{
							position36, tokenIndex36 := position, tokenIndex
							if !_rules[ruleAT]() {
								goto l36
							}
							goto l37
						l36:
							position, tokenIndex = position36, tokenIndex36
						}
					l37:
						if !_rules[ruleTime]() {
							goto l34
						}
						goto l35
					l34:
						position, tokenIndex = position34, tokenIndex34
					}
				l35:
					goto l4
				l33:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleRelativeMonth]() {
						goto l38
					}
					goto l4
				l38:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleRelativeYear]() {
						goto l39
					}
					goto l4
				l39:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleDate]() {
						goto l40
					}
					{
						position41, tokenIndex41 := position, tokenIndex
						{
							position43, tokenIndex43 := position, tokenIndex
							if !_rules[ruleAT]() {
								goto l43
							}
							goto l44
						l43:
							position, tokenIndex = position43, tokenIndex43
						}
					l44:
						if !_rules[ruleTime]() {
							goto l41
						}
						goto l42
					l41:
						position, tokenIndex = position41, tokenIndex41
					}
				l42:
					goto l4
				l40:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleTime]() {
						goto l2
					}
					{
						position45, tokenIndex45 := position, tokenIndex
						if !_rules[ruleON]() {
							goto l45
						}
						goto l46
					l45:
						position, tokenIndex = position45, tokenIndex45
					}
				l46:
					if !_rules[ruleDate]() {
						goto l2
					}
				}
			l4:
				add(ruleExpr, position3)
			}
			return true
		l2:
			position, tokenIndex = position2, tokenIndex2
			return false
		},
		/* 2 Date <- <(((Month DayOfMonth? COMMA? Year) / (Year Month DayOfMonth?) / (DayOfMonth? Month COMMA? Year)) Action0)> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[ruleMonth]() {
						goto l50
					}
					{
						position51, tokenIndex51 := position, tokenIndex
						if !_rules[ruleDayOfMonth]() {
							goto l51
						}
						goto l52
					l51:
						position, tokenIndex = position51, tokenIndex51
					}
				l52:
					{
						position53, tokenIndex53 := position, tokenIndex
						if !_rules[ruleCOMMA]() {
							goto l53
						}
						goto l54
					l53:
						position, tokenIndex = position53, tokenIndex53
					}
				l54:
					if !_rules[ruleYear]() {
						goto l50
					}
					goto l49
				l50:
					position, tokenIndex = position49, tokenIndex49
					if !_rules[ruleYear]() {
						goto l55
					}
					if !_rules[ruleMonth]() {
						goto l55
					}
					{
						position56, tokenIndex56 := position, tokenIndex
						if !_rules[ruleDayOfMonth]() {
							goto l56
						}
						goto l57
					l56:
						position, tokenIndex = position56, tokenIndex56
					}
				l57:
					goto l49
				l55:
					position, tokenIndex = position49, tokenIndex49
					{
						position58, tokenIndex58 := position, tokenIndex
						if !_rules[ruleDayOfMonth]() {
							goto l58
						}
						goto l59
					l58:
						position, tokenIndex = position58, tokenIndex58
					}
				l59:
					if !_rules[ruleMonth]() {
						goto l47
					}
					{
						position60, tokenIndex60 := position, tokenIndex
						if !_rules[ruleCOMMA]() {
							goto l60
						}
						goto l61
					l60:
						position, tokenIndex = position60, tokenIndex60
					}
				l61:
					if !_rules[ruleYear]() {
						goto l47
					}
				}
			l49:
				if !_rules[ruleAction0]() {
					goto l47
				}
				add(ruleDate, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 3 Year <- <(Number Action1)> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if !_rules[ruleNumber]() {
					goto l62
				}
				if !_rules[ruleAction1]() {
					goto l62
				}
				add(ruleYear, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 4 RelativeMinutes <- <((Number MINUTES AGO Action2) / (((Number MINUTES FROM_NOW) / (In Number? MINUTES FROM_NOW?)) Action3) / (Last Number? MINUTES Action4) / (Next Number? MINUTES Action5) / (NEXT MINUTE Action6) / (LAST MINUTE Action7))> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				{
					position66, tokenIndex66 := position, tokenIndex
					if !_rules[ruleNumber]() {
						goto l67
					}
					if !_rules[ruleMINUTES]() {
						goto l67
					}
					if !_rules[ruleAGO]() {
						goto l67
					}
					if !_rules[ruleAction2]() {
						goto l67
					}
					goto l66
				l67:
					position, tokenIndex = position66, tokenIndex66
					{
						position69, tokenIndex69 := position, tokenIndex
						if !_rules[ruleNumber]() {
							goto l70
						}
						if !_rules[ruleMINUTES]() {
							goto l70
						}
						if !_rules[ruleFROM_NOW]() {
							goto l70
						}
						goto l69
					l70:
						position, tokenIndex = position69, tokenIndex69
						if !_rules[ruleIn]() {
							goto l68
						}
						{
							position71, tokenIndex71 := position, tokenIndex
							if !_rules[ruleNumber]() {
								goto l71
							}
							goto l72
						l71:
							position, tokenIndex = position71, tokenIndex71
						}
					l72:
						if !_rules[ruleMINUTES]() {
							goto l68
						}
						{
							position73, tokenIndex73 := position, tokenIndex
							if !_rules[ruleFROM_NOW]() {
								goto l73
							}
							goto l74
						l73:
							position, tokenIndex = position73, tokenIndex73
						}
					l74:
					}
				l69:
					if !_rules[ruleAction3]() {
						goto l68
					}
					goto l66
				l68:
					position, tokenIndex = position66, tokenIndex66
					if !_rules[ruleLast]() {
						goto l75
					}
					{
						position76, tokenIndex76 := position, tokenIndex
						if !_rules[ruleNumber]() {
							goto l76
						}
						goto l77
					l76:
						position, tokenIndex = position76, tokenIndex76
					}
				l77:
					if !_rules[ruleMINUTES]() {
						goto l75
					}
					if !_rules[ruleAction4]() {
						goto l75
					}
					goto l66
				l75:
					position, tokenIndex = position66, tokenIndex66
					if !_rules[ruleNext]() {
						goto l78
					}
					{
						position79, tokenIndex79 := position, tokenIndex
						if !_rules[ruleNumber]() {
							goto l79
						}
						goto l80
					l79:
						position, tokenIndex = position79, tokenIndex79
					}
				l80:
					if !_rules[ruleMINUTES]() {
						goto l78
					}
					if !_rules[ruleAction5]() {
						goto l78
					}
					goto l66
				l78:
					position, tokenIndex = position66, tokenIndex66
					if !_rules[ruleNEXT]() {
						goto l81
					}
					if !_rules[ruleMINUTE]() {
						goto l81
					}
					if !_rules[ruleAction6]() {
						goto l81
					}
					goto l66
				l81:
					position, tokenIndex = position66, tokenIndex66
					if !_rules[ruleLAST]() {
						goto l64
					}
					if !_rules[ruleMINUTE]() {
						goto l64
					}
					if !_rules[ruleAction7]() {
						goto l64
					}
				}
			l66:
				add(ruleRelativeMinutes, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 5 RelativeHours <- <((Number HOURS AGO Action8) / (((Number HOURS FROM_NOW) / (In Number? HOURS FROM_NOW?)) Action9) / (LAST HOUR Action10) / (NEXT HOUR Action11))> */
		func() bool {
			position82, tokenIndex82 := position, tokenIndex
			{
				position83 := position
				{
					position84, tokenIndex84 := position, tokenIndex
					if !_rules[ruleNumber]() {
						goto l85
					}
					if !_rules[ruleHOURS]() {
						goto l85
					}
					if !_rules[ruleAGO]() {
						goto l85
					}
					if !_rules[ruleAction8]() {
						goto l85
					}
					goto l84
				l85:
					position, tokenIndex = position84, tokenIndex84
					{
						position87, tokenIndex87 := position, tokenIndex
						if !_rules[ruleNumber]() {
							goto l88
						}
						if !_rules[ruleHOURS]() {
							goto l88
						}
						if !_rules[ruleFROM_NOW]() {
							goto l88
						}
						goto l87
					l88:
						position, tokenIndex = position87, tokenIndex87
						if !_rules[ruleIn]() {
							goto l86
						}
						{
							position89, tokenIndex89 := position, tokenIndex
							if !_rules[ruleNumber]() {
								goto l89
							}
							goto l90
						l89:
							position, tokenIndex = position89, tokenIndex89
						}
					l90:
						if !_rules[ruleHOURS]() {
							goto l86
						}
						{
							position91, tokenIndex91 := position, tokenIndex
							if !_rules[ruleFROM_NOW]() {
								goto l91
							}
							goto l92
						l91:
							position, tokenIndex = position91, tokenIndex91
						}
					l92:
					}
				l87:
					if !_rules[ruleAction9]() {
						goto l86
					}
					goto l84
				l86:
					position, tokenIndex = position84, tokenIndex84
					if !_rules[ruleLAST]() {
						goto l93
					}
					if !_rules[ruleHOUR]() {
						goto l93
					}
					if !_rules[ruleAction10]() {
						goto l93
					}
					goto l84
				l93:
					position, tokenIndex = position84, tokenIndex84
					if !_rules[ruleNEXT]() {
						goto l82
					}
					if !_rules[ruleHOUR]() {
						goto l82
					}
					if !_rules[ruleAction11]() {
						goto l82
					}
				}
			l84:
				add(ruleRelativeHours, position83)
			}
			return true
		l82:
			position, tokenIndex = position82, tokenIndex82
			return false
		},
		/* 6 RelativeDays <- <((Number DAYS AGO Action12) / (((Number DAYS FROM_NOW) / (In Number? DAYS FROM_NOW?)) Action13))> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[ruleNumber]() {
						goto l97
					}
					if !_rules[ruleDAYS]() {
						goto l97
					}
					if !_rules[ruleAGO]() {
						goto l97
					}
					if !_rules[ruleAction12]() {
						goto l97
					}
					goto l96
				l97:
					position, tokenIndex = position96, tokenIndex96
					{
						position98, tokenIndex98 := position, tokenIndex
						if !_rules[ruleNumber]() {
							goto l99
						}
						if !_rules[ruleDAYS]() {
							goto l99
						}
						if !_rules[ruleFROM_NOW]() {
							goto l99
						}
						goto l98
					l99:
						position, tokenIndex = position98, tokenIndex98
						if !_rules[ruleIn]() {
							goto l94
						}
						{
							position100, tokenIndex100 := position, tokenIndex
							if !_rules[ruleNumber]() {
								goto l100
							}
							goto l101
						l100:
							position, tokenIndex = position100, tokenIndex100
						}
					l101:
						if !_rules[ruleDAYS]() {
							goto l94
						}
						{
							position102, tokenIndex102 := position, tokenIndex
							if !_rules[ruleFROM_NOW]() {
								goto l102
							}
							goto l103
						l102:
							position, tokenIndex = position102, tokenIndex102
						}
					l103:
					}
				l98:
					if !_rules[ruleAction13]() {
						goto l94
					}
				}
			l96:
				add(ruleRelativeDays, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 7 RelativeWeeks <- <((Number WEEKS AGO Action14) / (((Number WEEKS FROM_NOW) / (In Number? WEEKS FROM_NOW?)) Action15) / (NEXT WEEK Action16) / (LAST WEEK Action17))> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				{
					position106, tokenIndex106 := position, tokenIndex
					if !_rules[ruleNumber]() {
						goto l107
					}
					if !_rules[ruleWEEKS]() {
						goto l107
					}
					if !_rules[ruleAGO]() {
						goto l107
					}
					if !_rules[ruleAction14]() {
						goto l107
					}
					goto l106
				l107:
					position, tokenIndex = position106, tokenIndex106
					{
						position109, tokenIndex109 := position, tokenIndex
						if !_rules[ruleNumber]() {
							goto l110
						}
						if !_rules[ruleWEEKS]() {
							goto l110
						}
						if !_rules[ruleFROM_NOW]() {
							goto l110
						}
						goto l109
					l110:
						position, tokenIndex = position109, tokenIndex109
						if !_rules[ruleIn]() {
							goto l108
						}
						{
							position111, tokenIndex111 := position, tokenIndex
							if !_rules[ruleNumber]() {
								goto l111
							}
							goto l112
						l111:
							position, tokenIndex = position111, tokenIndex111
						}
					l112:
						if !_rules[ruleWEEKS]() {
							goto l108
						}
						{
							position113, tokenIndex113 := position, tokenIndex
							if !_rules[ruleFROM_NOW]() {
								goto l113
							}
							goto l114
						l113:
							position, tokenIndex = position113, tokenIndex113
						}
					l114:
					}
				l109:
					if !_rules[ruleAction15]() {
						goto l108
					}
					goto l106
				l108:
					position, tokenIndex = position106, tokenIndex106
					if !_rules[ruleNEXT]() {
						goto l115
					}
					if !_rules[ruleWEEK]() {
						goto l115
					}
					if !_rules[ruleAction16]() {
						goto l115
					}
					goto l106
				l115:
					position, tokenIndex = position106, tokenIndex106
					if !_rules[ruleLAST]() {
						goto l104
					}
					if !_rules[ruleWEEK]() {
						goto l104
					}
					if !_rules[ruleAction17]() {
						goto l104
					}
				}
			l106:
				add(ruleRelativeWeeks, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 8 RelativeMonthDay <- <((NEXT Month DayOfMonth Action18) / (LAST Month DayOfMonth Action19))> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[ruleNEXT]() {
						goto l119
					}
					if !_rules[ruleMonth]() {
						goto l119
					}
					if !_rules[ruleDayOfMonth]() {
						goto l119
					}
					if !_rules[ruleAction18]() {
						goto l119
					}
					goto l118
				l119:
					position, tokenIndex = position118, tokenIndex118
					if !_rules[ruleLAST]() {
						goto l116
					}
					if !_rules[ruleMonth]() {
						goto l116
					}
					if !_rules[ruleDayOfMonth]() {
						goto l116
					}
					if !_rules[ruleAction19]() {
						goto l116
					}
				}
			l118:
				add(ruleRelativeMonthDay, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 9 RelativeMonth <- <((Number MONTHS AGO Action20) / (((Number MONTHS FROM_NOW) / (In Number? MONTHS FROM_NOW?)) Action21) / (LAST Month Action22) / (NEXT Month Action23) / (LAST MONTH Action24) / (NEXT MONTH Action25))> */
		func() bool {
			position120, tokenIndex120 := position, tokenIndex
			{
				position121 := position
				{
					position122, tokenIndex122 := position, tokenIndex
					if !_rules[ruleNumber]() {
						goto l123
					}
					if !_rules[ruleMONTHS]() {
						goto l123
					}
					if !_rules[ruleAGO]() {
						goto l123
					}
					if !_rules[ruleAction20]() {
						goto l123
					}
					goto l122
				l123:
					position, tokenIndex = position122, tokenIndex122
					{
						position125, tokenIndex125 := position, tokenIndex
						if !_rules[ruleNumber]() {
							goto l126
						}
						if !_rules[ruleMONTHS]() {
							goto l126
						}
						if !_rules[ruleFROM_NOW]() {
							goto l126
						}
						goto l125
					l126:
						position, tokenIndex = position125, tokenIndex125
						if !_rules[ruleIn]() {
							goto l124
						}
						{
							position127, tokenIndex127 := position, tokenIndex
							if !_rules[ruleNumber]() {
								goto l127
							}
							goto l128
						l127:
							position, tokenIndex = position127, tokenIndex127
						}
					l128:
						if !_rules[ruleMONTHS]() {
							goto l124
						}
						{
							position129, tokenIndex129 := position, tokenIndex
							if !_rules[ruleFROM_NOW]() {
								goto l129
							}
							goto l130
						l129:
							position, tokenIndex = position129, tokenIndex129
						}
					l130:
					}
				l125:
					if !_rules[ruleAction21]() {
						goto l124
					}
					goto l122
				l124:
					position, tokenIndex = position122, tokenIndex122
					if !_rules[ruleLAST]() {
						goto l131
					}
					if !_rules[ruleMonth]() {
						goto l131
					}
					if !_rules[ruleAction22]() {
						goto l131
					}
					goto l122
				l131:
					position, tokenIndex = position122, tokenIndex122
					if !_rules[ruleNEXT]() {
						goto l132
					}
					if !_rules[ruleMonth]() {
						goto l132
					}
					if !_rules[ruleAction23]() {
						goto l132
					}
					goto l122
				l132:
					position, tokenIndex = position122, tokenIndex122
					if !_rules[ruleLAST]() {
						goto l133
					}
					if !_rules[ruleMONTH]() {
						goto l133
					}
					if !_rules[ruleAction24]() {
						goto l133
					}
					goto l122
				l133:
					position, tokenIndex = position122, tokenIndex122
					if !_rules[ruleNEXT]() {
						goto l120
					}
					if !_rules[ruleMONTH]() {
						goto l120
					}
					if !_rules[ruleAction25]() {
						goto l120
					}
				}
			l122:
				add(ruleRelativeMonth, position121)
			}
			return true
		l120:
			position, tokenIndex = position120, tokenIndex120
			return false
		},
		/* 10 RelativeYear <- <((Number YEARS AGO Action26) / (((Number YEARS FROM_NOW) / (In Number? YEARS FROM_NOW?)) Action27) / (LAST YEAR Action28) / (NEXT YEAR Action29))> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				{
					position136, tokenIndex136 := position, tokenIndex
					if !_rules[ruleNumber]() {
						goto l137
					}
					if !_rules[ruleYEARS]() {
						goto l137
					}
					if !_rules[ruleAGO]() {
						goto l137
					}
					if !_rules[ruleAction26]() {
						goto l137
					}
					goto l136
				l137:
					position, tokenIndex = position136, tokenIndex136
					{
						position139, tokenIndex139 := position, tokenIndex
						if !_rules[ruleNumber]() {
							goto l140
						}
						if !_rules[ruleYEARS]() {
							goto l140
						}
						if !_rules[ruleFROM_NOW]() {
							goto l140
						}
						goto l139
					l140:
						position, tokenIndex = position139, tokenIndex139
						if !_rules[ruleIn]() {
							goto l138
						}
						{
							position141, tokenIndex141 := position, tokenIndex
							if !_rules[ruleNumber]() {
								goto l141
							}
							goto l142
						l141:
							position, tokenIndex = position141, tokenIndex141
						}
					l142:
						if !_rules[ruleYEARS]() {
							goto l138
						}
						{
							position143, tokenIndex143 := position, tokenIndex
							if !_rules[ruleFROM_NOW]() {
								goto l143
							}
							goto l144
						l143:
							position, tokenIndex = position143, tokenIndex143
						}
					l144:
					}
				l139:
					if !_rules[ruleAction27]() {
						goto l138
					}
					goto l136
				l138:
					position, tokenIndex = position136, tokenIndex136
					if !_rules[ruleLAST]() {
						goto l145
					}
					if !_rules[ruleYEAR]() {
						goto l145
					}
					if !_rules[ruleAction28]() {
						goto l145
					}
					goto l136
				l145:
					position, tokenIndex = position136, tokenIndex136
					if !_rules[ruleNEXT]() {
						goto l134
					}
					if !_rules[ruleYEAR]() {
						goto l134
					}
					if !_rules[ruleAction29]() {
						goto l134
					}
				}
			l136:
				add(ruleRelativeYear, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 11 RelativeWeekdays <- <((TODAY Action30) / (YESTERDAY Action31) / (TOMORROW Action32) / (LAST Weekday Action33) / (NEXT Weekday Action34))> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				{
					position148, tokenIndex148 := position, tokenIndex
					if !_rules[ruleTODAY]() {
						goto l149
					}
					if !_rules[ruleAction30]() {
						goto l149
					}
					goto l148
				l149:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleYESTERDAY]() {
						goto l150
					}
					if !_rules[ruleAction31]() {
						goto l150
					}
					goto l148
				l150:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleTOMORROW]() {
						goto l151
					}
					if !_rules[ruleAction32]() {
						goto l151
					}
					goto l148
				l151:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleLAST]() {
						goto l152
					}
					if !_rules[ruleWeekday]() {
						goto l152
					}
					if !_rules[ruleAction33]() {
						goto l152
					}
					goto l148
				l152:
					position, tokenIndex = position148, tokenIndex148
					if !_rules[ruleNEXT]() {
						goto l146
					}
					if !_rules[ruleWeekday]() {
						goto l146
					}
					if !_rules[ruleAction34]() {
						goto l146
					}
				}
			l148:
				add(ruleRelativeWeekdays, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 12 DayOfMonth <- <(Number Ordinal? Action35)> */
		func() bool {
			position153, tokenIndex153 := position, tokenIndex
			{
				position154 := position
				if !_rules[ruleNumber]() {
					goto l153
				}
				{
					position155, tokenIndex155 := position, tokenIndex
					if !_rules[ruleOrdinal]() {
						goto l155
					}
					goto l156
				l155:
					position, tokenIndex = position155, tokenIndex155
				}
			l156:
				if !_rules[ruleAction35]() {
					goto l153
				}
				add(ruleDayOfMonth, position154)
			}
			return true
		l153:
			position, tokenIndex = position153, tokenIndex153
			return false
		},
		/* 13 Time <- <(Clock12Hour / Clock24Hour)> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				{
					position159, tokenIndex159 := position, tokenIndex
					if !_rules[ruleClock12Hour]() {
						goto l160
					}
					goto l159
				l160:
					position, tokenIndex = position159, tokenIndex159
					if !_rules[ruleClock24Hour]() {
						goto l157
					}
				}
			l159:
				add(ruleTime, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 14 Clock12Hour <- <((Number Action36 (Minutes Seconds?)? AM) / (Number Action37 (Minutes Seconds?)? PM))> */
		func() bool {
			position161, tokenIndex161 := position, tokenIndex
			{
				position162 := position
				{
					position163, tokenIndex163 := position, tokenIndex
					if !_rules[ruleNumber]() {
						goto l164
					}
					if !_rules[ruleAction36]() {
						goto l164
					}
					{
						position165, tokenIndex165 := position, tokenIndex
						if !_rules[ruleMinutes]() {
							goto l165
						}
						{
							position167, tokenIndex167 := position, tokenIndex
							if !_rules[ruleSeconds]() {
								goto l167
							}
							goto l168
						l167:
							position, tokenIndex = position167, tokenIndex167
						}
					l168:
						goto l166
					l165:
						position, tokenIndex = position165, tokenIndex165
					}
				l166:
					if !_rules[ruleAM]() {
						goto l164
					}
					goto l163
				l164:
					position, tokenIndex = position163, tokenIndex163
					if !_rules[ruleNumber]() {
						goto l161
					}
					if !_rules[ruleAction37]() {
						goto l161
					}
					{
						position169, tokenIndex169 := position, tokenIndex
						if !_rules[ruleMinutes]() {
							goto l169
						}
						{
							position171, tokenIndex171 := position, tokenIndex
							if !_rules[ruleSeconds]() {
								goto l171
							}
							goto l172
						l171:
							position, tokenIndex = position171, tokenIndex171
						}
					l172:
						goto l170
					l169:
						position, tokenIndex = position169, tokenIndex169
					}
				l170:
					if !_rules[rulePM]() {
						goto l161
					}
				}
			l163:
				add(ruleClock12Hour, position162)
			}
			return true
		l161:
			position, tokenIndex = position161, tokenIndex161
			return false
		},
		/* 15 Clock24Hour <- <(Number Action38 (Minutes Seconds?)?)> */
		func() bool {
			position173, tokenIndex173 := position, tokenIndex
			{
				position174 := position
				if !_rules[ruleNumber]() {
					goto l173
				}
				if !_rules[ruleAction38]() {
					goto l173
				}
				{
					position175, tokenIndex175 := position, tokenIndex
					if !_rules[ruleMinutes]() {
						goto l175
					}
					{
						position177, tokenIndex177 := position, tokenIndex
						if !_rules[ruleSeconds]() {
							goto l177
						}
						goto l178
					l177:
						position, tokenIndex = position177, tokenIndex177
					}
				l178:
					goto l176
				l175:
					position, tokenIndex = position175, tokenIndex175
				}
			l176:
				add(ruleClock24Hour, position174)
			}
			return true
		l173:
			position, tokenIndex = position173, tokenIndex173
			return false
		},
		/* 16 Minutes <- <(':' Number Action39)> */
		func() bool {
			position179, tokenIndex179 := position, tokenIndex
			{
				position180 := position
				if buffer[position] != rune(':') {
					goto l179
				}
				position++
				if !_rules[ruleNumber]() {
					goto l179
				}
				if !_rules[ruleAction39]() {
					goto l179
				}
				add(ruleMinutes, position180)
			}
			return true
		l179:
			position, tokenIndex = position179, tokenIndex179
			return false
		},
		/* 17 Seconds <- <(':' Number Action40)> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				if buffer[position] != rune(':') {
					goto l181
				}
				position++
				if !_rules[ruleNumber]() {
					goto l181
				}
				if !_rules[ruleAction40]() {
					goto l181
				}
				add(ruleSeconds, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 18 Number <- <((<[0-9]+> _ Action41) / ('a' 'n'? _ Action42) / ('o' 'n' 'e' _ Action43) / ('t' 'w' 'o' _ Action44) / ('t' 'h' 'r' 'e' 'e' _ Action45) / ('f' 'o' 'u' 'r' _ Action46) / ('f' 'i' 'v' 'e' _ Action47) / ('s' 'i' 'x' _ Action48) / ('s' 'e' 'v' 'e' 'n' _ Action49) / ('e' 'i' 'g' 'h' 't' _ Action50) / ('n' 'i' 'n' 'e' _ Action51) / ('t' 'e' 'n' _ Action52))> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				{
					position185, tokenIndex185 := position, tokenIndex
					{
						position187 := position
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l186
						}
						position++
					l188:
						{
							position189, tokenIndex189 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l189
							}
							position++
							goto l188
						l189:
							position, tokenIndex = position189, tokenIndex189
						}
						add(rulePegText, position187)
					}
					if !_rules[rule_]() {
						goto l186
					}
					if !_rules[ruleAction41]() {
						goto l186
					}
					goto l185
				l186:
					position, tokenIndex = position185, tokenIndex185
					if buffer[position] != rune('a') {
						goto l190
					}
					position++
					{
						position191, tokenIndex191 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l191
						}
						position++
						goto l192
					l191:
						position, tokenIndex = position191, tokenIndex191
					}
				l192:
					if !_rules[rule_]() {
						goto l190
					}
					if !_rules[ruleAction42]() {
						goto l190
					}
					goto l185
				l190:
					position, tokenIndex = position185, tokenIndex185
					if buffer[position] != rune('o') {
						goto l193
					}
					position++
					if buffer[position] != rune('n') {
						goto l193
					}
					position++
					if buffer[position] != rune('e') {
						goto l193
					}
					position++
					if !_rules[rule_]() {
						goto l193
					}
					if !_rules[ruleAction43]() {
						goto l193
					}
					goto l185
				l193:
					position, tokenIndex = position185, tokenIndex185
					if buffer[position] != rune('t') {
						goto l194
					}
					position++
					if buffer[position] != rune('w') {
						goto l194
					}
					position++
					if buffer[position] != rune('o') {
						goto l194
					}
					position++
					if !_rules[rule_]() {
						goto l194
					}
					if !_rules[ruleAction44]() {
						goto l194
					}
					goto l185
				l194:
					position, tokenIndex = position185, tokenIndex185
					if buffer[position] != rune('t') {
						goto l195
					}
					position++
					if buffer[position] != rune('h') {
						goto l195
					}
					position++
					if buffer[position] != rune('r') {
						goto l195
					}
					position++
					if buffer[position] != rune('e') {
						goto l195
					}
					position++
					if buffer[position] != rune('e') {
						goto l195
					}
					position++
					if !_rules[rule_]() {
						goto l195
					}
					if !_rules[ruleAction45]() {
						goto l195
					}
					goto l185
				l195:
					position, tokenIndex = position185, tokenIndex185
					if buffer[position] != rune('f') {
						goto l196
					}
					position++
					if buffer[position] != rune('o') {
						goto l196
					}
					position++
					if buffer[position] != rune('u') {
						goto l196
					}
					position++
					if buffer[position] != rune('r') {
						goto l196
					}
					position++
					if !_rules[rule_]() {
						goto l196
					}
					if !_rules[ruleAction46]() {
						goto l196
					}
					goto l185
				l196:
					position, tokenIndex = position185, tokenIndex185
					if buffer[position] != rune('f') {
						goto l197
					}
					position++
					if buffer[position] != rune('i') {
						goto l197
					}
					position++
					if buffer[position] != rune('v') {
						goto l197
					}
					position++
					if buffer[position] != rune('e') {
						goto l197
					}
					position++
					if !_rules[rule_]() {
						goto l197
					}
					if !_rules[ruleAction47]() {
						goto l197
					}
					goto l185
				l197:
					position, tokenIndex = position185, tokenIndex185
					if buffer[position] != rune('s') {
						goto l198
					}
					position++
					if buffer[position] != rune('i') {
						goto l198
					}
					position++
					if buffer[position] != rune('x') {
						goto l198
					}
					position++
					if !_rules[rule_]() {
						goto l198
					}
					if !_rules[ruleAction48]() {
						goto l198
					}
					goto l185
				l198:
					position, tokenIndex = position185, tokenIndex185
					if buffer[position] != rune('s') {
						goto l199
					}
					position++
					if buffer[position] != rune('e') {
						goto l199
					}
					position++
					if buffer[position] != rune('v') {
						goto l199
					}
					position++
					if buffer[position] != rune('e') {
						goto l199
					}
					position++
					if buffer[position] != rune('n') {
						goto l199
					}
					position++
					if !_rules[rule_]() {
						goto l199
					}
					if !_rules[ruleAction49]() {
						goto l199
					}
					goto l185
				l199:
					position, tokenIndex = position185, tokenIndex185
					if buffer[position] != rune('e') {
						goto l200
					}
					position++
					if buffer[position] != rune('i') {
						goto l200
					}
					position++
					if buffer[position] != rune('g') {
						goto l200
					}
					position++
					if buffer[position] != rune('h') {
						goto l200
					}
					position++
					if buffer[position] != rune('t') {
						goto l200
					}
					position++
					if !_rules[rule_]() {
						goto l200
					}
					if !_rules[ruleAction50]() {
						goto l200
					}
					goto l185
				l200:
					position, tokenIndex = position185, tokenIndex185
					if buffer[position] != rune('n') {
						goto l201
					}
					position++
					if buffer[position] != rune('i') {
						goto l201
					}
					position++
					if buffer[position] != rune('n') {
						goto l201
					}
					position++
					if buffer[position] != rune('e') {
						goto l201
					}
					position++
					if !_rules[rule_]() {
						goto l201
					}
					if !_rules[ruleAction51]() {
						goto l201
					}
					goto l185
				l201:
					position, tokenIndex = position185, tokenIndex185
					if buffer[position] != rune('t') {
						goto l183
					}
					position++
					if buffer[position] != rune('e') {
						goto l183
					}
					position++
					if buffer[position] != rune('n') {
						goto l183
					}
					position++
					if !_rules[rule_]() {
						goto l183
					}
					if !_rules[ruleAction52]() {
						goto l183
					}
				}
			l185:
				add(ruleNumber, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 19 Weekday <- <(('s' 'u' 'n' 'd' 'a' 'y' _ Action53) / ('m' 'o' 'n' 'd' 'a' 'y' _ Action54) / ('t' 'u' 'e' 's' 'd' 'a' 'y' _ Action55) / ('w' 'e' 'd' 'n' 'e' 's' 'd' 'a' 'y' _ Action56) / ('t' 'h' 'u' 'r' 's' 'd' 'a' 'y' _ Action57) / ('f' 'r' 'i' 'd' 'a' 'y' _ Action58) / ('s' 'a' 't' 'u' 'r' 'd' 'a' 'y' _ Action59))> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				{
					position204, tokenIndex204 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l205
					}
					position++
					if buffer[position] != rune('u') {
						goto l205
					}
					position++
					if buffer[position] != rune('n') {
						goto l205
					}
					position++
					if buffer[position] != rune('d') {
						goto l205
					}
					position++
					if buffer[position] != rune('a') {
						goto l205
					}
					position++
					if buffer[position] != rune('y') {
						goto l205
					}
					position++
					if !_rules[rule_]() {
						goto l205
					}
					if !_rules[ruleAction53]() {
						goto l205
					}
					goto l204
				l205:
					position, tokenIndex = position204, tokenIndex204
					if buffer[position] != rune('m') {
						goto l206
					}
					position++
					if buffer[position] != rune('o') {
						goto l206
					}
					position++
					if buffer[position] != rune('n') {
						goto l206
					}
					position++
					if buffer[position] != rune('d') {
						goto l206
					}
					position++
					if buffer[position] != rune('a') {
						goto l206
					}
					position++
					if buffer[position] != rune('y') {
						goto l206
					}
					position++
					if !_rules[rule_]() {
						goto l206
					}
					if !_rules[ruleAction54]() {
						goto l206
					}
					goto l204
				l206:
					position, tokenIndex = position204, tokenIndex204
					if buffer[position] != rune('t') {
						goto l207
					}
					position++
					if buffer[position] != rune('u') {
						goto l207
					}
					position++
					if buffer[position] != rune('e') {
						goto l207
					}
					position++
					if buffer[position] != rune('s') {
						goto l207
					}
					position++
					if buffer[position] != rune('d') {
						goto l207
					}
					position++
					if buffer[position] != rune('a') {
						goto l207
					}
					position++
					if buffer[position] != rune('y') {
						goto l207
					}
					position++
					if !_rules[rule_]() {
						goto l207
					}
					if !_rules[ruleAction55]() {
						goto l207
					}
					goto l204
				l207:
					position, tokenIndex = position204, tokenIndex204
					if buffer[position] != rune('w') {
						goto l208
					}
					position++
					if buffer[position] != rune('e') {
						goto l208
					}
					position++
					if buffer[position] != rune('d') {
						goto l208
					}
					position++
					if buffer[position] != rune('n') {
						goto l208
					}
					position++
					if buffer[position] != rune('e') {
						goto l208
					}
					position++
					if buffer[position] != rune('s') {
						goto l208
					}
					position++
					if buffer[position] != rune('d') {
						goto l208
					}
					position++
					if buffer[position] != rune('a') {
						goto l208
					}
					position++
					if buffer[position] != rune('y') {
						goto l208
					}
					position++
					if !_rules[rule_]() {
						goto l208
					}
					if !_rules[ruleAction56]() {
						goto l208
					}
					goto l204
				l208:
					position, tokenIndex = position204, tokenIndex204
					if buffer[position] != rune('t') {
						goto l209
					}
					position++
					if buffer[position] != rune('h') {
						goto l209
					}
					position++
					if buffer[position] != rune('u') {
						goto l209
					}
					position++
					if buffer[position] != rune('r') {
						goto l209
					}
					position++
					if buffer[position] != rune('s') {
						goto l209
					}
					position++
					if buffer[position] != rune('d') {
						goto l209
					}
					position++
					if buffer[position] != rune('a') {
						goto l209
					}
					position++
					if buffer[position] != rune('y') {
						goto l209
					}
					position++
					if !_rules[rule_]() {
						goto l209
					}
					if !_rules[ruleAction57]() {
						goto l209
					}
					goto l204
				l209:
					position, tokenIndex = position204, tokenIndex204
					if buffer[position] != rune('f') {
						goto l210
					}
					position++
					if buffer[position] != rune('r') {
						goto l210
					}
					position++
					if buffer[position] != rune('i') {
						goto l210
					}
					position++
					if buffer[position] != rune('d') {
						goto l210
					}
					position++
					if buffer[position] != rune('a') {
						goto l210
					}
					position++
					if buffer[position] != rune('y') {
						goto l210
					}
					position++
					if !_rules[rule_]() {
						goto l210
					}
					if !_rules[ruleAction58]() {
						goto l210
					}
					goto l204
				l210:
					position, tokenIndex = position204, tokenIndex204
					if buffer[position] != rune('s') {
						goto l202
					}
					position++
					if buffer[position] != rune('a') {
						goto l202
					}
					position++
					if buffer[position] != rune('t') {
						goto l202
					}
					position++
					if buffer[position] != rune('u') {
						goto l202
					}
					position++
					if buffer[position] != rune('r') {
						goto l202
					}
					position++
					if buffer[position] != rune('d') {
						goto l202
					}
					position++
					if buffer[position] != rune('a') {
						goto l202
					}
					position++
					if buffer[position] != rune('y') {
						goto l202
					}
					position++
					if !_rules[rule_]() {
						goto l202
					}
					if !_rules[ruleAction59]() {
						goto l202
					}
				}
			l204:
				add(ruleWeekday, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 20 Month <- <(('j' 'a' 'n' 'u' 'a' 'r' 'y' _ Action60) / ('f' 'e' 'b' 'r' 'u' 'a' 'r' 'y' _ Action61) / ('m' 'a' 'r' 'c' 'h' _ Action62) / ('a' 'p' 'r' 'i' 'l' _ Action63) / ('m' 'a' 'y' _ Action64) / ('j' 'u' 'n' 'e' _ Action65) / ('j' 'u' 'l' 'y' _ Action66) / ('a' 'u' 'g' 'u' 's' 't' _ Action67) / ('s' 'e' 'p' 't' 'e' 'm' 'b' 'e' 'r' _ Action68) / ('o' 'c' 't' 'o' 'b' 'e' 'r' _ Action69) / ('n' 'o' 'v' 'e' 'm' 'b' 'e' 'r' _ Action70) / ('d' 'e' 'c' 'e' 'm' 'b' 'e' 'r' _ Action71))> */
		func() bool {
			position211, tokenIndex211 := position, tokenIndex
			{
				position212 := position
				{
					position213, tokenIndex213 := position, tokenIndex
					if buffer[position] != rune('j') {
						goto l214
					}
					position++
					if buffer[position] != rune('a') {
						goto l214
					}
					position++
					if buffer[position] != rune('n') {
						goto l214
					}
					position++
					if buffer[position] != rune('u') {
						goto l214
					}
					position++
					if buffer[position] != rune('a') {
						goto l214
					}
					position++
					if buffer[position] != rune('r') {
						goto l214
					}
					position++
					if buffer[position] != rune('y') {
						goto l214
					}
					position++
					if !_rules[rule_]() {
						goto l214
					}
					if !_rules[ruleAction60]() {
						goto l214
					}
					goto l213
				l214:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('f') {
						goto l215
					}
					position++
					if buffer[position] != rune('e') {
						goto l215
					}
					position++
					if buffer[position] != rune('b') {
						goto l215
					}
					position++
					if buffer[position] != rune('r') {
						goto l215
					}
					position++
					if buffer[position] != rune('u') {
						goto l215
					}
					position++
					if buffer[position] != rune('a') {
						goto l215
					}
					position++
					if buffer[position] != rune('r') {
						goto l215
					}
					position++
					if buffer[position] != rune('y') {
						goto l215
					}
					position++
					if !_rules[rule_]() {
						goto l215
					}
					if !_rules[ruleAction61]() {
						goto l215
					}
					goto l213
				l215:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('m') {
						goto l216
					}
					position++
					if buffer[position] != rune('a') {
						goto l216
					}
					position++
					if buffer[position] != rune('r') {
						goto l216
					}
					position++
					if buffer[position] != rune('c') {
						goto l216
					}
					position++
					if buffer[position] != rune('h') {
						goto l216
					}
					position++
					if !_rules[rule_]() {
						goto l216
					}
					if !_rules[ruleAction62]() {
						goto l216
					}
					goto l213
				l216:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('a') {
						goto l217
					}
					position++
					if buffer[position] != rune('p') {
						goto l217
					}
					position++
					if buffer[position] != rune('r') {
						goto l217
					}
					position++
					if buffer[position] != rune('i') {
						goto l217
					}
					position++
					if buffer[position] != rune('l') {
						goto l217
					}
					position++
					if !_rules[rule_]() {
						goto l217
					}
					if !_rules[ruleAction63]() {
						goto l217
					}
					goto l213
				l217:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('m') {
						goto l218
					}
					position++
					if buffer[position] != rune('a') {
						goto l218
					}
					position++
					if buffer[position] != rune('y') {
						goto l218
					}
					position++
					if !_rules[rule_]() {
						goto l218
					}
					if !_rules[ruleAction64]() {
						goto l218
					}
					goto l213
				l218:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('j') {
						goto l219
					}
					position++
					if buffer[position] != rune('u') {
						goto l219
					}
					position++
					if buffer[position] != rune('n') {
						goto l219
					}
					position++
					if buffer[position] != rune('e') {
						goto l219
					}
					position++
					if !_rules[rule_]() {
						goto l219
					}
					if !_rules[ruleAction65]() {
						goto l219
					}
					goto l213
				l219:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('j') {
						goto l220
					}
					position++
					if buffer[position] != rune('u') {
						goto l220
					}
					position++
					if buffer[position] != rune('l') {
						goto l220
					}
					position++
					if buffer[position] != rune('y') {
						goto l220
					}
					position++
					if !_rules[rule_]() {
						goto l220
					}
					if !_rules[ruleAction66]() {
						goto l220
					}
					goto l213
				l220:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('a') {
						goto l221
					}
					position++
					if buffer[position] != rune('u') {
						goto l221
					}
					position++
					if buffer[position] != rune('g') {
						goto l221
					}
					position++
					if buffer[position] != rune('u') {
						goto l221
					}
					position++
					if buffer[position] != rune('s') {
						goto l221
					}
					position++
					if buffer[position] != rune('t') {
						goto l221
					}
					position++
					if !_rules[rule_]() {
						goto l221
					}
					if !_rules[ruleAction67]() {
						goto l221
					}
					goto l213
				l221:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('s') {
						goto l222
					}
					position++
					if buffer[position] != rune('e') {
						goto l222
					}
					position++
					if buffer[position] != rune('p') {
						goto l222
					}
					position++
					if buffer[position] != rune('t') {
						goto l222
					}
					position++
					if buffer[position] != rune('e') {
						goto l222
					}
					position++
					if buffer[position] != rune('m') {
						goto l222
					}
					position++
					if buffer[position] != rune('b') {
						goto l222
					}
					position++
					if buffer[position] != rune('e') {
						goto l222
					}
					position++
					if buffer[position] != rune('r') {
						goto l222
					}
					position++
					if !_rules[rule_]() {
						goto l222
					}
					if !_rules[ruleAction68]() {
						goto l222
					}
					goto l213
				l222:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('o') {
						goto l223
					}
					position++
					if buffer[position] != rune('c') {
						goto l223
					}
					position++
					if buffer[position] != rune('t') {
						goto l223
					}
					position++
					if buffer[position] != rune('o') {
						goto l223
					}
					position++
					if buffer[position] != rune('b') {
						goto l223
					}
					position++
					if buffer[position] != rune('e') {
						goto l223
					}
					position++
					if buffer[position] != rune('r') {
						goto l223
					}
					position++
					if !_rules[rule_]() {
						goto l223
					}
					if !_rules[ruleAction69]() {
						goto l223
					}
					goto l213
				l223:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('n') {
						goto l224
					}
					position++
					if buffer[position] != rune('o') {
						goto l224
					}
					position++
					if buffer[position] != rune('v') {
						goto l224
					}
					position++
					if buffer[position] != rune('e') {
						goto l224
					}
					position++
					if buffer[position] != rune('m') {
						goto l224
					}
					position++
					if buffer[position] != rune('b') {
						goto l224
					}
					position++
					if buffer[position] != rune('e') {
						goto l224
					}
					position++
					if buffer[position] != rune('r') {
						goto l224
					}
					position++
					if !_rules[rule_]() {
						goto l224
					}
					if !_rules[ruleAction70]() {
						goto l224
					}
					goto l213
				l224:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('d') {
						goto l211
					}
					position++
					if buffer[position] != rune('e') {
						goto l211
					}
					position++
					if buffer[position] != rune('c') {
						goto l211
					}
					position++
					if buffer[position] != rune('e') {
						goto l211
					}
					position++
					if buffer[position] != rune('m') {
						goto l211
					}
					position++
					if buffer[position] != rune('b') {
						goto l211
					}
					position++
					if buffer[position] != rune('e') {
						goto l211
					}
					position++
					if buffer[position] != rune('r') {
						goto l211
					}
					position++
					if !_rules[rule_]() {
						goto l211
					}
					if !_rules[ruleAction71]() {
						goto l211
					}
				}
			l213:
				add(ruleMonth, position212)
			}
			return true
		l211:
			position, tokenIndex = position211, tokenIndex211
			return false
		},
		/* 21 In <- <(IN _ Action72)> */
		func() bool {
			position225, tokenIndex225 := position, tokenIndex
			{
				position226 := position
				if !_rules[ruleIN]() {
					goto l225
				}
				if !_rules[rule_]() {
					goto l225
				}
				if !_rules[ruleAction72]() {
					goto l225
				}
				add(ruleIn, position226)
			}
			return true
		l225:
			position, tokenIndex = position225, tokenIndex225
			return false
		},
		/* 22 Last <- <(LAST _ Action73)> */
		func() bool {
			position227, tokenIndex227 := position, tokenIndex
			{
				position228 := position
				if !_rules[ruleLAST]() {
					goto l227
				}
				if !_rules[rule_]() {
					goto l227
				}
				if !_rules[ruleAction73]() {
					goto l227
				}
				add(ruleLast, position228)
			}
			return true
		l227:
			position, tokenIndex = position227, tokenIndex227
			return false
		},
		/* 23 Next <- <(NEXT _ Action74)> */
		func() bool {
			position229, tokenIndex229 := position, tokenIndex
			{
				position230 := position
				if !_rules[ruleNEXT]() {
					goto l229
				}
				if !_rules[rule_]() {
					goto l229
				}
				if !_rules[ruleAction74]() {
					goto l229
				}
				add(ruleNext, position230)
			}
			return true
		l229:
			position, tokenIndex = position229, tokenIndex229
			return false
		},
		/* 24 Ordinal <- <((('s' 't') / ('n' 'd') / ('r' 'd') / ('t' 'h')) _)> */
		func() bool {
			position231, tokenIndex231 := position, tokenIndex
			{
				position232 := position
				{
					position233, tokenIndex233 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l234
					}
					position++
					if buffer[position] != rune('t') {
						goto l234
					}
					position++
					goto l233
				l234:
					position, tokenIndex = position233, tokenIndex233
					if buffer[position] != rune('n') {
						goto l235
					}
					position++
					if buffer[position] != rune('d') {
						goto l235
					}
					position++
					goto l233
				l235:
					position, tokenIndex = position233, tokenIndex233
					if buffer[position] != rune('r') {
						goto l236
					}
					position++
					if buffer[position] != rune('d') {
						goto l236
					}
					position++
					goto l233
				l236:
					position, tokenIndex = position233, tokenIndex233
					if buffer[position] != rune('t') {
						goto l231
					}
					position++
					if buffer[position] != rune('h') {
						goto l231
					}
					position++
				}
			l233:
				if !_rules[rule_]() {
					goto l231
				}
				add(ruleOrdinal, position232)
			}
			return true
		l231:
			position, tokenIndex = position231, tokenIndex231
			return false
		},
		/* 25 YEARS <- <('y' 'e' 'a' 'r' 's'? _)> */
		func() bool {
			position237, tokenIndex237 := position, tokenIndex
			{
				position238 := position
				if buffer[position] != rune('y') {
					goto l237
				}
				position++
				if buffer[position] != rune('e') {
					goto l237
				}
				position++
				if buffer[position] != rune('a') {
					goto l237
				}
				position++
				if buffer[position] != rune('r') {
					goto l237
				}
				position++
				{
					position239, tokenIndex239 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l239
					}
					position++
					goto l240
				l239:
					position, tokenIndex = position239, tokenIndex239
				}
			l240:
				if !_rules[rule_]() {
					goto l237
				}
				add(ruleYEARS, position238)
			}
			return true
		l237:
			position, tokenIndex = position237, tokenIndex237
			return false
		},
		/* 26 YEAR <- <('y' 'e' 'a' 'r' _)> */
		func() bool {
			position241, tokenIndex241 := position, tokenIndex
			{
				position242 := position
				if buffer[position] != rune('y') {
					goto l241
				}
				position++
				if buffer[position] != rune('e') {
					goto l241
				}
				position++
				if buffer[position] != rune('a') {
					goto l241
				}
				position++
				if buffer[position] != rune('r') {
					goto l241
				}
				position++
				if !_rules[rule_]() {
					goto l241
				}
				add(ruleYEAR, position242)
			}
			return true
		l241:
			position, tokenIndex = position241, tokenIndex241
			return false
		},
		/* 27 MONTHS <- <('m' 'o' 'n' 't' 'h' 's'? _)> */
		func() bool {
			position243, tokenIndex243 := position, tokenIndex
			{
				position244 := position
				if buffer[position] != rune('m') {
					goto l243
				}
				position++
				if buffer[position] != rune('o') {
					goto l243
				}
				position++
				if buffer[position] != rune('n') {
					goto l243
				}
				position++
				if buffer[position] != rune('t') {
					goto l243
				}
				position++
				if buffer[position] != rune('h') {
					goto l243
				}
				position++
				{
					position245, tokenIndex245 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l245
					}
					position++
					goto l246
				l245:
					position, tokenIndex = position245, tokenIndex245
				}
			l246:
				if !_rules[rule_]() {
					goto l243
				}
				add(ruleMONTHS, position244)
			}
			return true
		l243:
			position, tokenIndex = position243, tokenIndex243
			return false
		},
		/* 28 MONTH <- <('m' 'o' 'n' 't' 'h' _)> */
		func() bool {
			position247, tokenIndex247 := position, tokenIndex
			{
				position248 := position
				if buffer[position] != rune('m') {
					goto l247
				}
				position++
				if buffer[position] != rune('o') {
					goto l247
				}
				position++
				if buffer[position] != rune('n') {
					goto l247
				}
				position++
				if buffer[position] != rune('t') {
					goto l247
				}
				position++
				if buffer[position] != rune('h') {
					goto l247
				}
				position++
				if !_rules[rule_]() {
					goto l247
				}
				add(ruleMONTH, position248)
			}
			return true
		l247:
			position, tokenIndex = position247, tokenIndex247
			return false
		},
		/* 29 WEEKS <- <('w' 'e' 'e' 'k' 's'? _)> */
		func() bool {
			position249, tokenIndex249 := position, tokenIndex
			{
				position250 := position
				if buffer[position] != rune('w') {
					goto l249
				}
				position++
				if buffer[position] != rune('e') {
					goto l249
				}
				position++
				if buffer[position] != rune('e') {
					goto l249
				}
				position++
				if buffer[position] != rune('k') {
					goto l249
				}
				position++
				{
					position251, tokenIndex251 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l251
					}
					position++
					goto l252
				l251:
					position, tokenIndex = position251, tokenIndex251
				}
			l252:
				if !_rules[rule_]() {
					goto l249
				}
				add(ruleWEEKS, position250)
			}
			return true
		l249:
			position, tokenIndex = position249, tokenIndex249
			return false
		},
		/* 30 WEEK <- <('w' 'e' 'e' 'k' _)> */
		func() bool {
			position253, tokenIndex253 := position, tokenIndex
			{
				position254 := position
				if buffer[position] != rune('w') {
					goto l253
				}
				position++
				if buffer[position] != rune('e') {
					goto l253
				}
				position++
				if buffer[position] != rune('e') {
					goto l253
				}
				position++
				if buffer[position] != rune('k') {
					goto l253
				}
				position++
				if !_rules[rule_]() {
					goto l253
				}
				add(ruleWEEK, position254)
			}
			return true
		l253:
			position, tokenIndex = position253, tokenIndex253
			return false
		},
		/* 31 DAYS <- <('d' 'a' 'y' 's'? _)> */
		func() bool {
			position255, tokenIndex255 := position, tokenIndex
			{
				position256 := position
				if buffer[position] != rune('d') {
					goto l255
				}
				position++
				if buffer[position] != rune('a') {
					goto l255
				}
				position++
				if buffer[position] != rune('y') {
					goto l255
				}
				position++
				{
					position257, tokenIndex257 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l257
					}
					position++
					goto l258
				l257:
					position, tokenIndex = position257, tokenIndex257
				}
			l258:
				if !_rules[rule_]() {
					goto l255
				}
				add(ruleDAYS, position256)
			}
			return true
		l255:
			position, tokenIndex = position255, tokenIndex255
			return false
		},
		/* 32 HOURS <- <('h' 'o' 'u' 'r' 's'? _)> */
		func() bool {
			position259, tokenIndex259 := position, tokenIndex
			{
				position260 := position
				if buffer[position] != rune('h') {
					goto l259
				}
				position++
				if buffer[position] != rune('o') {
					goto l259
				}
				position++
				if buffer[position] != rune('u') {
					goto l259
				}
				position++
				if buffer[position] != rune('r') {
					goto l259
				}
				position++
				{
					position261, tokenIndex261 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l261
					}
					position++
					goto l262
				l261:
					position, tokenIndex = position261, tokenIndex261
				}
			l262:
				if !_rules[rule_]() {
					goto l259
				}
				add(ruleHOURS, position260)
			}
			return true
		l259:
			position, tokenIndex = position259, tokenIndex259
			return false
		},
		/* 33 HOUR <- <('h' 'o' 'u' 'r' _)> */
		func() bool {
			position263, tokenIndex263 := position, tokenIndex
			{
				position264 := position
				if buffer[position] != rune('h') {
					goto l263
				}
				position++
				if buffer[position] != rune('o') {
					goto l263
				}
				position++
				if buffer[position] != rune('u') {
					goto l263
				}
				position++
				if buffer[position] != rune('r') {
					goto l263
				}
				position++
				if !_rules[rule_]() {
					goto l263
				}
				add(ruleHOUR, position264)
			}
			return true
		l263:
			position, tokenIndex = position263, tokenIndex263
			return false
		},
		/* 34 MINUTES <- <('m' 'i' 'n' 'u' 't' 'e' 's'? _)> */
		func() bool {
			position265, tokenIndex265 := position, tokenIndex
			{
				position266 := position
				if buffer[position] != rune('m') {
					goto l265
				}
				position++
				if buffer[position] != rune('i') {
					goto l265
				}
				position++
				if buffer[position] != rune('n') {
					goto l265
				}
				position++
				if buffer[position] != rune('u') {
					goto l265
				}
				position++
				if buffer[position] != rune('t') {
					goto l265
				}
				position++
				if buffer[position] != rune('e') {
					goto l265
				}
				position++
				{
					position267, tokenIndex267 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l267
					}
					position++
					goto l268
				l267:
					position, tokenIndex = position267, tokenIndex267
				}
			l268:
				if !_rules[rule_]() {
					goto l265
				}
				add(ruleMINUTES, position266)
			}
			return true
		l265:
			position, tokenIndex = position265, tokenIndex265
			return false
		},
		/* 35 MINUTE <- <('m' 'i' 'n' 'u' 't' 'e' _)> */
		func() bool {
			position269, tokenIndex269 := position, tokenIndex
			{
				position270 := position
				if buffer[position] != rune('m') {
					goto l269
				}
				position++
				if buffer[position] != rune('i') {
					goto l269
				}
				position++
				if buffer[position] != rune('n') {
					goto l269
				}
				position++
				if buffer[position] != rune('u') {
					goto l269
				}
				position++
				if buffer[position] != rune('t') {
					goto l269
				}
				position++
				if buffer[position] != rune('e') {
					goto l269
				}
				position++
				if !_rules[rule_]() {
					goto l269
				}
				add(ruleMINUTE, position270)
			}
			return true
		l269:
			position, tokenIndex = position269, tokenIndex269
			return false
		},
		/* 36 YESTERDAY <- <('y' 'e' 's' 't' 'e' 'r' 'd' 'a' 'y' _)> */
		func() bool {
			position271, tokenIndex271 := position, tokenIndex
			{
				position272 := position
				if buffer[position] != rune('y') {
					goto l271
				}
				position++
				if buffer[position] != rune('e') {
					goto l271
				}
				position++
				if buffer[position] != rune('s') {
					goto l271
				}
				position++
				if buffer[position] != rune('t') {
					goto l271
				}
				position++
				if buffer[position] != rune('e') {
					goto l271
				}
				position++
				if buffer[position] != rune('r') {
					goto l271
				}
				position++
				if buffer[position] != rune('d') {
					goto l271
				}
				position++
				if buffer[position] != rune('a') {
					goto l271
				}
				position++
				if buffer[position] != rune('y') {
					goto l271
				}
				position++
				if !_rules[rule_]() {
					goto l271
				}
				add(ruleYESTERDAY, position272)
			}
			return true
		l271:
			position, tokenIndex = position271, tokenIndex271
			return false
		},
		/* 37 TOMORROW <- <('t' 'o' 'm' 'o' 'r' 'r' 'o' 'w' _)> */
		func() bool {
			position273, tokenIndex273 := position, tokenIndex
			{
				position274 := position
				if buffer[position] != rune('t') {
					goto l273
				}
				position++
				if buffer[position] != rune('o') {
					goto l273
				}
				position++
				if buffer[position] != rune('m') {
					goto l273
				}
				position++
				if buffer[position] != rune('o') {
					goto l273
				}
				position++
				if buffer[position] != rune('r') {
					goto l273
				}
				position++
				if buffer[position] != rune('r') {
					goto l273
				}
				position++
				if buffer[position] != rune('o') {
					goto l273
				}
				position++
				if buffer[position] != rune('w') {
					goto l273
				}
				position++
				if !_rules[rule_]() {
					goto l273
				}
				add(ruleTOMORROW, position274)
			}
			return true
		l273:
			position, tokenIndex = position273, tokenIndex273
			return false
		},
		/* 38 TODAY <- <('t' 'o' 'd' 'a' 'y' _)> */
		func() bool {
			position275, tokenIndex275 := position, tokenIndex
			{
				position276 := position
				if buffer[position] != rune('t') {
					goto l275
				}
				position++
				if buffer[position] != rune('o') {
					goto l275
				}
				position++
				if buffer[position] != rune('d') {
					goto l275
				}
				position++
				if buffer[position] != rune('a') {
					goto l275
				}
				position++
				if buffer[position] != rune('y') {
					goto l275
				}
				position++
				if !_rules[rule_]() {
					goto l275
				}
				add(ruleTODAY, position276)
			}
			return true
		l275:
			position, tokenIndex = position275, tokenIndex275
			return false
		},
		/* 39 AGO <- <('a' 'g' 'o' _)> */
		func() bool {
			position277, tokenIndex277 := position, tokenIndex
			{
				position278 := position
				if buffer[position] != rune('a') {
					goto l277
				}
				position++
				if buffer[position] != rune('g') {
					goto l277
				}
				position++
				if buffer[position] != rune('o') {
					goto l277
				}
				position++
				if !_rules[rule_]() {
					goto l277
				}
				add(ruleAGO, position278)
			}
			return true
		l277:
			position, tokenIndex = position277, tokenIndex277
			return false
		},
		/* 40 FROM_NOW <- <((('f' 'r' 'o' 'm' ' ' 'n' 'o' 'w') / ('f' 'r' 'o' 'm' ' ' 't' 'o' 'd' 'a' 'y')) _)> */
		func() bool {
			position279, tokenIndex279 := position, tokenIndex
			{
				position280 := position
				{
					position281, tokenIndex281 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l282
					}
					position++
					if buffer[position] != rune('r') {
						goto l282
					}
					position++
					if buffer[position] != rune('o') {
						goto l282
					}
					position++
					if buffer[position] != rune('m') {
						goto l282
					}
					position++
					if buffer[position] != rune(' ') {
						goto l282
					}
					position++
					if buffer[position] != rune('n') {
						goto l282
					}
					position++
					if buffer[position] != rune('o') {
						goto l282
					}
					position++
					if buffer[position] != rune('w') {
						goto l282
					}
					position++
					goto l281
				l282:
					position, tokenIndex = position281, tokenIndex281
					if buffer[position] != rune('f') {
						goto l279
					}
					position++
					if buffer[position] != rune('r') {
						goto l279
					}
					position++
					if buffer[position] != rune('o') {
						goto l279
					}
					position++
					if buffer[position] != rune('m') {
						goto l279
					}
					position++
					if buffer[position] != rune(' ') {
						goto l279
					}
					position++
					if buffer[position] != rune('t') {
						goto l279
					}
					position++
					if buffer[position] != rune('o') {
						goto l279
					}
					position++
					if buffer[position] != rune('d') {
						goto l279
					}
					position++
					if buffer[position] != rune('a') {
						goto l279
					}
					position++
					if buffer[position] != rune('y') {
						goto l279
					}
					position++
				}
			l281:
				if !_rules[rule_]() {
					goto l279
				}
				add(ruleFROM_NOW, position280)
			}
			return true
		l279:
			position, tokenIndex = position279, tokenIndex279
			return false
		},
		/* 41 NOW <- <('n' 'o' 'w' _)> */
		func() bool {
			position283, tokenIndex283 := position, tokenIndex
			{
				position284 := position
				if buffer[position] != rune('n') {
					goto l283
				}
				position++
				if buffer[position] != rune('o') {
					goto l283
				}
				position++
				if buffer[position] != rune('w') {
					goto l283
				}
				position++
				if !_rules[rule_]() {
					goto l283
				}
				add(ruleNOW, position284)
			}
			return true
		l283:
			position, tokenIndex = position283, tokenIndex283
			return false
		},
		/* 42 AM <- <('a' 'm' _)> */
		func() bool {
			position285, tokenIndex285 := position, tokenIndex
			{
				position286 := position
				if buffer[position] != rune('a') {
					goto l285
				}
				position++
				if buffer[position] != rune('m') {
					goto l285
				}
				position++
				if !_rules[rule_]() {
					goto l285
				}
				add(ruleAM, position286)
			}
			return true
		l285:
			position, tokenIndex = position285, tokenIndex285
			return false
		},
		/* 43 PM <- <('p' 'm' _)> */
		func() bool {
			position287, tokenIndex287 := position, tokenIndex
			{
				position288 := position
				if buffer[position] != rune('p') {
					goto l287
				}
				position++
				if buffer[position] != rune('m') {
					goto l287
				}
				position++
				if !_rules[rule_]() {
					goto l287
				}
				add(rulePM, position288)
			}
			return true
		l287:
			position, tokenIndex = position287, tokenIndex287
			return false
		},
		/* 44 NEXT <- <('n' 'e' 'x' 't' _)> */
		func() bool {
			position289, tokenIndex289 := position, tokenIndex
			{
				position290 := position
				if buffer[position] != rune('n') {
					goto l289
				}
				position++
				if buffer[position] != rune('e') {
					goto l289
				}
				position++
				if buffer[position] != rune('x') {
					goto l289
				}
				position++
				if buffer[position] != rune('t') {
					goto l289
				}
				position++
				if !_rules[rule_]() {
					goto l289
				}
				add(ruleNEXT, position290)
			}
			return true
		l289:
			position, tokenIndex = position289, tokenIndex289
			return false
		},
		/* 45 IN <- <((('i' 'n' ' ' 'a' 'n') / ('i' 'n' ' ' 'a') / ('i' 'n')) _)> */
		func() bool {
			position291, tokenIndex291 := position, tokenIndex
			{
				position292 := position
				{
					position293, tokenIndex293 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l294
					}
					position++
					if buffer[position] != rune('n') {
						goto l294
					}
					position++
					if buffer[position] != rune(' ') {
						goto l294
					}
					position++
					if buffer[position] != rune('a') {
						goto l294
					}
					position++
					if buffer[position] != rune('n') {
						goto l294
					}
					position++
					goto l293
				l294:
					position, tokenIndex = position293, tokenIndex293
					if buffer[position] != rune('i') {
						goto l295
					}
					position++
					if buffer[position] != rune('n') {
						goto l295
					}
					position++
					if buffer[position] != rune(' ') {
						goto l295
					}
					position++
					if buffer[position] != rune('a') {
						goto l295
					}
					position++
					goto l293
				l295:
					position, tokenIndex = position293, tokenIndex293
					if buffer[position] != rune('i') {
						goto l291
					}
					position++
					if buffer[position] != rune('n') {
						goto l291
					}
					position++
				}
			l293:
				if !_rules[rule_]() {
					goto l291
				}
				add(ruleIN, position292)
			}
			return true
		l291:
			position, tokenIndex = position291, tokenIndex291
			return false
		},
		/* 46 LAST <- <((('l' 'a' 's' 't') / ('p' 'a' 's' 't') / ('p' 'r' 'e' 'v' 'i' 'o' 'u' 's')) _)> */
		func() bool {
			position296, tokenIndex296 := position, tokenIndex
			{
				position297 := position
				{
					position298, tokenIndex298 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l299
					}
					position++
					if buffer[position] != rune('a') {
						goto l299
					}
					position++
					if buffer[position] != rune('s') {
						goto l299
					}
					position++
					if buffer[position] != rune('t') {
						goto l299
					}
					position++
					goto l298
				l299:
					position, tokenIndex = position298, tokenIndex298
					if buffer[position] != rune('p') {
						goto l300
					}
					position++
					if buffer[position] != rune('a') {
						goto l300
					}
					position++
					if buffer[position] != rune('s') {
						goto l300
					}
					position++
					if buffer[position] != rune('t') {
						goto l300
					}
					position++
					goto l298
				l300:
					position, tokenIndex = position298, tokenIndex298
					if buffer[position] != rune('p') {
						goto l296
					}
					position++
					if buffer[position] != rune('r') {
						goto l296
					}
					position++
					if buffer[position] != rune('e') {
						goto l296
					}
					position++
					if buffer[position] != rune('v') {
						goto l296
					}
					position++
					if buffer[position] != rune('i') {
						goto l296
					}
					position++
					if buffer[position] != rune('o') {
						goto l296
					}
					position++
					if buffer[position] != rune('u') {
						goto l296
					}
					position++
					if buffer[position] != rune('s') {
						goto l296
					}
					position++
				}
			l298:
				if !_rules[rule_]() {
					goto l296
				}
				add(ruleLAST, position297)
			}
			return true
		l296:
			position, tokenIndex = position296, tokenIndex296
			return false
		},
		/* 47 AT <- <('a' 't' _)> */
		func() bool {
			position301, tokenIndex301 := position, tokenIndex
			{
				position302 := position
				if buffer[position] != rune('a') {
					goto l301
				}
				position++
				if buffer[position] != rune('t') {
					goto l301
				}
				position++
				if !_rules[rule_]() {
					goto l301
				}
				add(ruleAT, position302)
			}
			return true
		l301:
			position, tokenIndex = position301, tokenIndex301
			return false
		},
		/* 48 ON <- <('o' 'n' _)> */
		func() bool {
			position303, tokenIndex303 := position, tokenIndex
			{
				position304 := position
				if buffer[position] != rune('o') {
					goto l303
				}
				position++
				if buffer[position] != rune('n') {
					goto l303
				}
				position++
				if !_rules[rule_]() {
					goto l303
				}
				add(ruleON, position304)
			}
			return true
		l303:
			position, tokenIndex = position303, tokenIndex303
			return false
		},
		/* 49 COMMA <- <(',' _)> */
		func() bool {
			position305, tokenIndex305 := position, tokenIndex
			{
				position306 := position
				if buffer[position] != rune(',') {
					goto l305
				}
				position++
				if !_rules[rule_]() {
					goto l305
				}
				add(ruleCOMMA, position306)
			}
			return true
		l305:
			position, tokenIndex = position305, tokenIndex305
			return false
		},
		/* 50 _ <- <Whitespace*> */
		func() bool {
			{
				position308 := position
			l309:
				{
					position310, tokenIndex310 := position, tokenIndex
					if !_rules[ruleWhitespace]() {
						goto l310
					}
					goto l309
				l310:
					position, tokenIndex = position310, tokenIndex310
				}
				add(rule_, position308)
			}
			return true
		},
		/* 51 Whitespace <- <(' ' / '\t' / EOL)> */
		func() bool {
			position311, tokenIndex311 := position, tokenIndex
			{
				position312 := position
				{
					position313, tokenIndex313 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l314
					}
					position++
					goto l313
				l314:
					position, tokenIndex = position313, tokenIndex313
					if buffer[position] != rune('\t') {
						goto l315
					}
					position++
					goto l313
				l315:
					position, tokenIndex = position313, tokenIndex313
					if !_rules[ruleEOL]() {
						goto l311
					}
				}
			l313:
				add(ruleWhitespace, position312)
			}
			return true
		l311:
			position, tokenIndex = position311, tokenIndex311
			return false
		},
		/* 52 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position316, tokenIndex316 := position, tokenIndex
			{
				position317 := position
				{
					position318, tokenIndex318 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l319
					}
					position++
					if buffer[position] != rune('\n') {
						goto l319
					}
					position++
					goto l318
				l319:
					position, tokenIndex = position318, tokenIndex318
					if buffer[position] != rune('\n') {
						goto l320
					}
					position++
					goto l318
				l320:
					position, tokenIndex = position318, tokenIndex318
					if buffer[position] != rune('\r') {
						goto l316
					}
					position++
				}
			l318:
				add(ruleEOL, position317)
			}
			return true
		l316:
			position, tokenIndex = position316, tokenIndex316
			return false
		},
		/* 54 Action0 <- <{
		   dom := p.dayOfMonth
		   if dom == 0 {
		      dom = 1
		   }
		   p.t = time.Date(p.year, p.month, dom, 0, 0, 0, 0, p.t.Location())
		}> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 55 Action1 <- <{
		    p.year = p.number
		}> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 56 Action2 <- <{
		   p.t = p.t.Add(-time.Minute * time.Duration(p.number))
		 }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 57 Action3 <- <{
		   p.t = p.t.Add(time.Minute * time.Duration(p.number))
		 }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 58 Action4 <- <{
		   p.t = p.t.Add(-time.Minute * time.Duration(p.number))
		 }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 59 Action5 <- <{
		   p.t = p.t.Add(time.Minute * time.Duration(p.number))
		 }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 60 Action6 <- <{
		   p.t = p.t.Add(time.Minute)
		 }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 61 Action7 <- <{
		   p.t = p.t.Add(-time.Minute)
		 }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 62 Action8 <- <{
		   p.t = p.t.Add(-time.Hour * time.Duration(p.number))
		 }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 63 Action9 <- <{
		   p.t = p.t.Add(time.Hour * time.Duration(p.number))
		 }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 64 Action10 <- <{
		   p.t = p.t.Add(-time.Hour)
		 }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 65 Action11 <- <{
		   p.t = p.t.Add(time.Hour)
		 }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 66 Action12 <- <{
		   p.t = p.t.Add(-day * time.Duration(p.number))
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 67 Action13 <- <{
		   p.t = p.t.Add(day * time.Duration(p.number))
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 68 Action14 <- <{
		   p.t = p.t.Add(-week * time.Duration(p.number))
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 69 Action15 <- <{
		   p.t = p.t.Add(week * time.Duration(p.number))
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 70 Action16 <- <{
		   p.t = p.t.Add(week)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 71 Action17 <- <{
		   p.t = p.t.Add(-week)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 72 Action18 <- <{
		   p.t = nextMonthDayTime(p.t, p.month, p.dayOfMonth, 0, 0, 0)
		 }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 73 Action19 <- <{
		   p.t = prevMonthDayTime(p.t, p.month, p.dayOfMonth, 0, 0, 0)
		 }> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 74 Action20 <- <{
		   p.t = p.t.AddDate(0, -p.number, 0)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 75 Action21 <- <{
		   p.t = p.t.AddDate(0, p.number, 0)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 76 Action22 <- <{
		   p.t = prevMonth(p.t, p.month)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 77 Action23 <- <{
		   p.t = nextMonth(p.t, p.month)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 78 Action24 <- <{
		   p.t = p.t.AddDate(0, -1, 0)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 79 Action25 <- <{
		   p.t = p.t.AddDate(0, 1, 0)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 80 Action26 <- <{
		   p.t = truncateYear(p.t.AddDate(-p.number, 0, 0))
		 }> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 81 Action27 <- <{
		   p.t = truncateYear(p.t.AddDate(p.number, 0, 0))
		 }> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 82 Action28 <- <{
		   p.t = truncateYear(p.t.AddDate(-1, 0, 0))
		 }> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 83 Action29 <- <{
		   p.t = truncateYear(p.t.AddDate(1, 0, 0))
		 }> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 84 Action30 <- <{
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 85 Action31 <- <{
		   p.t = p.t.Add(-day)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 86 Action32 <- <{
		   p.t = p.t.Add(+day)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 87 Action33 <- <{
		   p.t = prevWeekday(p.t, p.weekday)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 88 Action34 <- <{
		   p.t = nextWeekday(p.t, p.weekday)
		   truncateDayIfNoTime(p)
		 }> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
		/* 89 Action35 <- <{ p.dayOfMonth = p.number }> */
		func() bool {
			{
				add(ruleAction35, position)
			}
			return true
		},
		/* 90 Action36 <- <{
		   year, month, day := p.t.Date()
		   p.t = time.Date(year, month, day, p.number, 0, 0, 0, p.t.Location())
		   p.hasTime = true
		 }> */
		func() bool {
			{
				add(ruleAction36, position)
			}
			return true
		},
		/* 91 Action37 <- <{
		   year, month, day := p.t.Date()
		   p.t = time.Date(year, month, day, p.number + 12, 0, 0, 0, p.t.Location())
		   p.hasTime = true
		 }> */
		func() bool {
			{
				add(ruleAction37, position)
			}
			return true
		},
		/* 92 Action38 <- <{
		   year, month, day := p.t.Date()
		   p.t = time.Date(year, month, day, p.number, 0, 0, 0, p.t.Location())
		   p.hasTime = true
		 }> */
		func() bool {
			{
				add(ruleAction38, position)
			}
			return true
		},
		/* 93 Action39 <- <{
		   t := p.t
		   year, month, day := t.Date()
		   hour, _, _ := t.Clock()
		   p.t = time.Date(year, month, day, hour, p.number, 0, 0, t.Location())
		 }> */
		func() bool {
			{
				add(ruleAction39, position)
			}
			return true
		},
		/* 94 Action40 <- <{
		   t := p.t
		   year, month, day := t.Date()
		   hour, min, _ := t.Clock()
		   p.t = time.Date(year, month, day, hour, min, p.number, 0, t.Location())
		 }> */
		func() bool {
			{
				add(ruleAction40, position)
			}
			return true
		},
		nil,
		/* 96 Action41 <- <{ n, _ := strconv.Atoi(text); p.number = n }> */
		func() bool {
			{
				add(ruleAction41, position)
			}
			return true
		},
		/* 97 Action42 <- <{ p.number = 1 }> */
		func() bool {
			{
				add(ruleAction42, position)
			}
			return true
		},
		/* 98 Action43 <- <{ p.number = 1 }> */
		func() bool {
			{
				add(ruleAction43, position)
			}
			return true
		},
		/* 99 Action44 <- <{ p.number = 2 }> */
		func() bool {
			{
				add(ruleAction44, position)
			}
			return true
		},
		/* 100 Action45 <- <{ p.number = 3 }> */
		func() bool {
			{
				add(ruleAction45, position)
			}
			return true
		},
		/* 101 Action46 <- <{ p.number = 4 }> */
		func() bool {
			{
				add(ruleAction46, position)
			}
			return true
		},
		/* 102 Action47 <- <{ p.number = 5 }> */
		func() bool {
			{
				add(ruleAction47, position)
			}
			return true
		},
		/* 103 Action48 <- <{ p.number = 6 }> */
		func() bool {
			{
				add(ruleAction48, position)
			}
			return true
		},
		/* 104 Action49 <- <{ p.number = 7 }> */
		func() bool {
			{
				add(ruleAction49, position)
			}
			return true
		},
		/* 105 Action50 <- <{ p.number = 8 }> */
		func() bool {
			{
				add(ruleAction50, position)
			}
			return true
		},
		/* 106 Action51 <- <{ p.number = 9 }> */
		func() bool {
			{
				add(ruleAction51, position)
			}
			return true
		},
		/* 107 Action52 <- <{ p.number = 10 }> */
		func() bool {
			{
				add(ruleAction52, position)
			}
			return true
		},
		/* 108 Action53 <- <{ p.weekday = time.Sunday }> */
		func() bool {
			{
				add(ruleAction53, position)
			}
			return true
		},
		/* 109 Action54 <- <{ p.weekday = time.Monday }> */
		func() bool {
			{
				add(ruleAction54, position)
			}
			return true
		},
		/* 110 Action55 <- <{ p.weekday = time.Tuesday }> */
		func() bool {
			{
				add(ruleAction55, position)
			}
			return true
		},
		/* 111 Action56 <- <{ p.weekday = time.Wednesday }> */
		func() bool {
			{
				add(ruleAction56, position)
			}
			return true
		},
		/* 112 Action57 <- <{ p.weekday = time.Thursday }> */
		func() bool {
			{
				add(ruleAction57, position)
			}
			return true
		},
		/* 113 Action58 <- <{ p.weekday = time.Friday }> */
		func() bool {
			{
				add(ruleAction58, position)
			}
			return true
		},
		/* 114 Action59 <- <{ p.weekday = time.Saturday }> */
		func() bool {
			{
				add(ruleAction59, position)
			}
			return true
		},
		/* 115 Action60 <- <{ p.month = time.January }> */
		func() bool {
			{
				add(ruleAction60, position)
			}
			return true
		},
		/* 116 Action61 <- <{ p.month = time.February }> */
		func() bool {
			{
				add(ruleAction61, position)
			}
			return true
		},
		/* 117 Action62 <- <{ p.month = time.March }> */
		func() bool {
			{
				add(ruleAction62, position)
			}
			return true
		},
		/* 118 Action63 <- <{ p.month = time.April }> */
		func() bool {
			{
				add(ruleAction63, position)
			}
			return true
		},
		/* 119 Action64 <- <{ p.month = time.May }> */
		func() bool {
			{
				add(ruleAction64, position)
			}
			return true
		},
		/* 120 Action65 <- <{ p.month = time.June }> */
		func() bool {
			{
				add(ruleAction65, position)
			}
			return true
		},
		/* 121 Action66 <- <{ p.month = time.July }> */
		func() bool {
			{
				add(ruleAction66, position)
			}
			return true
		},
		/* 122 Action67 <- <{ p.month = time.August }> */
		func() bool {
			{
				add(ruleAction67, position)
			}
			return true
		},
		/* 123 Action68 <- <{ p.month = time.September }> */
		func() bool {
			{
				add(ruleAction68, position)
			}
			return true
		},
		/* 124 Action69 <- <{ p.month = time.October }> */
		func() bool {
			{
				add(ruleAction69, position)
			}
			return true
		},
		/* 125 Action70 <- <{ p.month = time.November }> */
		func() bool {
			{
				add(ruleAction70, position)
			}
			return true
		},
		/* 126 Action71 <- <{ p.month = time.December }> */
		func() bool {
			{
				add(ruleAction71, position)
			}
			return true
		},
		/* 127 Action72 <- <{ p.number = 1}> */
		func() bool {
			{
				add(ruleAction72, position)
			}
			return true
		},
		/* 128 Action73 <- <{ p.number = 1 }> */
		func() bool {
			{
				add(ruleAction73, position)
			}
			return true
		},
		/* 129 Action74 <- <{ p.number = 1 }> */
		func() bool {
			{
				add(ruleAction74, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
